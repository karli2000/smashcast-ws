{"version":3,"sources":["smashcast-ws.js"],"names":["SmashcastWs","servers","messagesQueue","currentServer","connectionServerRetryLimit","autoReConnect","connectionTries","reconnect","getServersObservable","first","subscribe","map","normalizeServerAddress","server","connectWs","console","error","of","delay","ajax","method","url","timeout","responseType","retryWhen","e","data","response","server_ip","serverAddress","increaseConnectionTries","emit","socket","connect","registerEventListeners","length","disconnect","target","params","isConnected","sendMessageNow","call","sendMessageOnceItsConnected","socketParams","targets","split","service","shift","push","once","messageToSend","sendMessage","onDrop","bind","reason","setTimeout","handleReconnect","willReconnectTo","resetConnectionTries","on","parsed","JSON","parse","event","callback","removeListener","connected","eventName","fromEvent","address","startsWith"],"mappings":"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","file":"smashcast-ws.js","sourcesContent":["import sample from 'lodash/sample';\nimport isString from 'lodash/isString';\nimport without from 'lodash/without';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/dom/ajax';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/operator/delay';\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/retryWhen';\n\nimport io from 'socket.io-client';\nimport { EventEmitter } from 'events';\nimport { supportsWebSockets } from './utils/utils';\nimport { SERVER_LIST_API, FALLBACK_SERVER, SOCKET_IO_CONFIG } from './config';\n\nexport default class SmashcastWs extends EventEmitter {\n\n    servers = [];\n    messagesQueue = [];\n    currentServer = '';\n    connectionServerRetryLimit = 3;\n    autoReConnect = true;\n    connectionTries = 0;\n\n    constructor() {\n        super();\n        this.reconnect();\n    }\n\n    reconnect() {\n        getServersObservable()\n            .first()\n            .subscribe(servers => {\n                this.servers = servers.map(server => normalizeServerAddress(server));\n                this.connectWs(sample(this.servers));\n            }, console.error);\n\n        function getServersObservable() {\n            if (!supportsWebSockets()) {\n                return Observable\n                    .of([FALLBACK_SERVER])\n                    .delay(0); // make it async\n            }\n\n            return Observable\n                .ajax({\n                    method: 'GET',\n                    url: SERVER_LIST_API,\n                    timeout: 10000,\n                    responseType: 'json',\n                })\n                .retryWhen(e => e.delay(6000))\n                .map(data => data.response)\n                .map(servers => servers.map(server => server.server_ip));\n        }\n    }\n\n    connectWs(serverAddress) {\n        this.increaseConnectionTries();\n        this.emit('serverChange', serverAddress);\n        this.currentServer = serverAddress;\n        this.socket = io.connect(serverAddress, SOCKET_IO_CONFIG);\n\n        this.registerEventListeners();\n    }\n\n    disconnect() {\n        this.messagesQueue.length = 0;\n        this.socket.disconnect();\n    }\n\n    sendMessage(target, params) {\n        if (this.isConnected()) {\n            sendMessageNow.call(this);\n        } else {\n            sendMessageOnceItsConnected.call(this);\n        }\n\n        function sendMessageNow() {\n            const socketParams = {\n                params,\n                method: target,\n            };\n\n            const targets = target.split('.');\n            if (targets.length > 1) {\n                socketParams.service = targets.shift();\n                socketParams.method = targets.shift();\n            }\n\n            this.socket.emit('message', socketParams);\n        }\n\n        function sendMessageOnceItsConnected() {\n            this.messagesQueue.push({\n                target,\n                params,\n            });\n        }\n    }\n\n    registerEventListeners() {\n        this.socket.once('connect', () => {\n            this.emit('open');\n        });\n\n        this.once('open', () => {\n            while (this.messagesQueue.length) {\n                const messageToSend = this.messagesQueue.shift();\n                this.sendMessage(messageToSend.target, messageToSend.params);\n            }\n        });\n\n        this.socket.once('disconnect', onDrop.bind(this));\n\n        this.socket.once('connect_timeout', onDrop.bind(this));\n\n        this.socket.once('error', onDrop.bind(this));\n\n        function onDrop(reason) {\n            this.emit('close');\n\n            if (!this.autoReConnect) {\n                return;\n            }\n\n            if (reason === 'io server disconnect') {\n                setTimeout(handleReconnect.bind(this), 5000);\n            } else {\n                handleReconnect.call(this);\n            }\n\n            function handleReconnect() {\n                if (this.connectionTries < this.connectionServerRetryLimit) {\n                    const willReconnectTo = sample(without(this.servers, this.currentServer)) || this.currentServer;\n                    this.connectWs(willReconnectTo);\n                } else {\n                    this.resetConnectionTries();\n                    this.reconnect();\n                }\n            }\n        }\n\n        this.socket.on('message', data => {\n            if (!isString(data)) { // todo fix tests with outgoing messages\n                return;\n            }\n\n            const parsed = JSON.parse(data);\n            let method = parsed.method;\n\n            if (parsed.service) {\n                method = `${parsed.service}.${method}`;\n            }\n\n            this.emit(method, parsed.params);\n        });\n    }\n\n    increaseConnectionTries() {\n        this.connectionTries += 1;\n    }\n\n    resetConnectionTries() {\n        this.connectionTries = 0;\n    }\n\n    off(event, callback) {\n        this.removeListener(event, callback);\n    }\n\n    on(event, callback) {\n        super.on(event, callback);\n\n        if (event === 'open' && this.isConnected()) {\n            setTimeout(() => callback());\n        }\n    }\n\n    isConnected() {\n        return this.socket && this.socket.connected;\n    }\n\n    observe(eventName) {\n        return Observable.fromEvent(this, eventName);\n    }\n}\n\n\nfunction normalizeServerAddress(address) {\n    if (!address.startsWith('https://')) {\n        return `https://${address}`;\n    }\n\n    return address;\n}\n"]}